//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:        CFF.bt
// Author:      Jille
// Revision:    8
// Purpose:     Discover Pro MIB2 images.mcf file parser
// Comments:    Each of the marked files in this archive is ZLIB-compressed RGBA data
// Colorcoding: Red = unknown, Green = known. Dark gray = probable. Light gray = Zlib data.
//--------------------------------------

////////////////////////////////////////////////////////////

LittleEndian();
byte magic[12]  <format=hex,bgcolor=cSilver>; //
long data_size  <format=decimal,bgcolor=cGreen>;
long data_size2 <format=decimal,bgcolor=cGreen>;
long unknown_0  <format=hex,bgcolor=cRed>;
long toc_size  <format=decimal,bgcolor=cGreen>;
long numfiles<format=hex,bgcolor=cGreen>;

struct
{
    ushort some_id<format=hex,bgcolor=cSilver>;
    byte unknown0;
    byte file_type_or_so;

} toc [toc_size] <optimize=false>;

struct
{
    byte checksum[16]<format=hex,bgcolor=cYellow>;
    long resource_id<format=hex,bgcolor=cYellow>;
    
} ids [numfiles] <optimize=false>;


struct
{
    int pathlength <format=hex,bgcolor=cBlack>;
    int unknown1 <format=hex,bgcolor=cYellow>;
    int unknown3 <format=hex,bgcolor=cSilver>;
    if (unknown1!=8388608){
        int data_size <format=hex,bgcolor=cGreen>;
        int data_size2 <format=hex,bgcolor=cGreen>;
    } else {
        int data_size <format=hex,bgcolor=cGreen>;
    }
    int offset <format=hex,bgcolor=cGreen>;
    char path[pathlength]<format=hex,bgcolor=cGreen>;
} toc2 [numfiles] <optimize=false>;

struct
{
    byte png_data;
} data [1] <optimize=false>;


local int index = 0;
Printf("ID \t offset \t size(B) \t path \n");
Printf("-- \t ------ \t ---- \t ---- \n");
while( index < numfiles )
{
    Printf ("%d \t %x \t %d \t %s \n" , index+1, toc2[index].offset, toc2[index].data_size, toc2[index].path );
    index = index + 1;
}

/*SetBackColor (cSilver );
uint header_unk_1;     //these 4 ints are always the same in all files
uint header_unk_2;     //at least, for the ones I've checked.
uint header_unk_3;     //so this is also always the same
uint header_unk_4;     //as well as this

SetBackColor (cGreen);

uint toc_header; //"TOC " This is where the table of contents starts.
SetBackColor (cSilver );
uint divider_5; //always 0. Divider?
uint unknown_6; //always 4. I don't know why.
SetBackColor (cGreen);
uint size_of_TOC; //the size of the table of contents. This table starts after num_of_files
uint size_of_TOC_copy; //== always identical to 7
uint divider_9; //always 0. Divider?
SetBackColor (cRed);
uint unknown_10; //some kind of checksum?

SetBackColor (cGreen);
uint num_of_files;  // the number of files in this archive. After this, size_of_TOC is going to count.
SetBackColor (cNone);


// first, it's displaying a list of files, their ID, the offset where it starts
struct    
{
    SetBackColor(cGreen);
    uchar filetype[4];  // always "IMG "
    uint file_id;
    uint offset;
    uint size;
    SetBackColor(cNone);
} toc [num_of_files];

SetBackColor (cRed);
uint unknown_11;
SetBackColor (cNone);


local int i;
for(i = 0; i < num_of_files; i++)
struct
{
SetBackColor (cGreen);
    uchar filetype[4];      //always "IMG "
    uint file_id;           //the unique number of the file. Be aware, it starts at 1, while this array starts numbering at 0;

    SetBackColor (cSilver );
    uint pixel_depth;        // this seems to be always 0x08 00 00 00
    
    SetBackColor (cGreen);
    uint zipped_size;
    uint unzipped_size;
    SetBackColor (cSilver );
    uint bool_compression;        // always 1. Possibly a boolean for compression on/off?

    SetBackColor (cRed);
    uint unknown_16;        //don't know... some kind of checksum?
    SetBackColor (cGreen);
    short width;    //speaks for itself
    short height;   //speaks for itself
    SetBackColor (cSilver );
    short picture_mode;      // this is sometimes 0x0411(4356), sometimes 0x0010(4096)
    short divider_18;     //always 00
    SetBackColor (cLtGray);
    uint data[ (toc[i].size/4)-9 ]; // Zlib data
    SetBackColor (cNone);

} contents;




Assert(FEof());
*/
