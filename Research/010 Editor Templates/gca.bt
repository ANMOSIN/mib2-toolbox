//--------------------------------------
//--- 010 Editor Binary Template
//
// File:        gca.bt
// Author:      Jille
// Revision:    2
// Purpose:     Discover Pro MIB2 *.gca file parser
// Comments:    This will translate the gca files used for vehicle-specific 
//              Ambient and Climate configurations. It will generate a list of
//              coordinates as well as commands to be used with ImageMagick 
//              convert to generate a graphic based on Interior_LHD.png or 
//              Interior_RHD.png
//--------------------------------------
byte header[2] <bgcolor=cGreen>; //CAFE
FSeek(6);
short amount_of_zones <bgcolor=cDkGreen>;
struct 
{
    short zone_number <bgcolor=cGreen>;
    byte filler[4] <fgcolor=cGray>;
    short amount_of_points <bgcolor=cDkGreen>;
    struct
    {
        short data[2] <bgcolor=cBlue>;
    } point [amount_of_points] <optimize=false>;
byte filler2[18] <fgcolor=cGray>;

} zone[amount_of_zones] <optimize=false>;


// code for generating output to console:
local int i=0;
local int j=0;
local string command = "convert Interior_LHD.png"; //will be used to generate imagemagick command
//command = "convert Interior_RHD.png"; //use if you want to generate righthand drive
local string polygon = "" ;
local int x =0;
local int y =0;
local string coordinate,Ycoordinate,Xcoordinate,zonetitle,zonetext;

while (i<amount_of_zones){

    Printf ( "Zone %i \n" ,zone[i].zone_number  );
    j=0;
    SPrintf (zonetitle, "%d", zone[i].zone_number);
    polygon = " -fill \"rgba( 255, 0, 0 , 0.2 )\" -draw \"polyline ";
    while (j<zone[i].amount_of_points){
        x = zone[i].point[j].data[0];
        y = zone[i].point[j].data[1];
        Printf ("Point %i - x: %i y: %i \n", j, x, y);
        SPrintf( Xcoordinate, "%d", (int)x);
        SPrintf( Ycoordinate, "%d", (int)y);

        zonetext = " -fill white -pointsize 24 -annotate +" + Xcoordinate + "+" + Ycoordinate + " " + zonetitle;

        if ( j < zone[i].amount_of_points -1){
            Ycoordinate = "," + Ycoordinate + " ";
        } else { 
            Ycoordinate = "," + Ycoordinate + "\"";
        }
        coordinate = Xcoordinate + Ycoordinate;
        polygon = polygon + coordinate;
        j=j+1;         
    }
    command = command + polygon + zonetext;
    i=i+1;
}

Printf ("\nCommand for imagemagick:\n%s output.png", command);
